2014-10-20
	增加数据适配器,使支持多数据库类型
2015-01-08
	增加没有主键ID的抽象类,使能自义主键字段实现MODEL
	增加虚拟字段转换,将指定函数或语法转换为对象属性,灵活性更大了
	增加属性覆盖,继承的类能覆盖父类的属性了
2015-01-19
	自动编译判断增加查询字段判断,不会因为对象属性删除了,编译的存储过程里还有老字段
2015-01-27
	增加GUID类型映射
	查询数据源不再是DataTable,改为DataReader,增加DataReader回调,原因是DataReader在关闭前,output是取不到值的
	同时修改CoreHelper使支持延迟取output
2015-01-30
	增加类型与适配器匹配,使支持一个应用内多种数据库类型
2015-02-02
	整理对象和属性缓存为关联项
	重写字段类型转换方法
2015-02-04
	增加数据访问上下文方法,解决事务专参问题
	需要实现方法
	public static AgentManage ContextInstance<T>(CRL.BaseProvider<T> baseProvider) where T : CRL.IModel, new()
    {
        var instance = Instance;
        instance.SetContext(baseProvider);
        return instance;
    }
2015-02-06
	封装表达式查询方法参数,使支持扩展
2015-02-09
	表达式查询方法引入到适配器
	修改DateDiff方法,新写法为
	query.Where(b=>b.AddTime.DateDiff(CRL.DatePart.dd,DateTime.Now)>1);
2015-02-25
	增加了修改属性值的扩展方法,以代替ParameCollection
	p.Change(b => b.BarCode);//表示值被更改了
    p.Change(b => b.BarCode,"123");//通过参数赋值
    p.Change(b => b.BarCode == "123");//通过表达式赋值
	数据缓存更新现在是多线程了
2015-02-27
	通过重新构造属性能实现差异更新了
	string name;
    public string Name
    {
        get { return name; }
        set {
            name = value;
            SetChanges("name", value);
        }
    }
2015-02-28 
	新增的属性也能自动在数据库创建了,根目录会生成数据表缓存文件TableCache.config以作对比
2015-03-02
	在更新数据时,如果缓存里也有该数据,缓存也会被更改
	权限控制缓存只会产生一种了
2015-03-04
	解决查询表达式多个扩展方法同时写,解析时会报错的BUG
2015-03-10
	重大更新:重新整理了表达式解析,增加了关联查询支持,以两种形式返回关联结果
	1.按筛选值返回动态对象
	2.附加给属性索引,以索引的方式调用
2015-03-15
	关联能返回别名了
2015-03-16
	对象缓存查找效率更高了
2015-03-26
	简化GROUP分页,现在能直接用语法进行GROUP了
2015-04-03
	增加了Distinct支持
2015-04-07
	修改了字段没有正确检查的错误
2015-04-13
	优化了字段查找和适配器创建
2015-04-24
	重大更新,增加了分布式缓存查询,能用编程语法查询服务器缓存了
	TCP形式支持连接池的机制,简单实现了并发连接
2015-05-05
	使缓存服务支持分布式
2015-05-08
	增加Min,Max方法
2015-05-13
	修改TCP缓存代理并发连接BUG
2015-05-18
	缓存改为主键字典,按主键查询更快了,对象缓存条件创建发生了更改
	AllCache改为返回IEnumerable了
2015-05-28
	表达式右边支持对象属性运算了 如 b=>b.Number1<b.Number2